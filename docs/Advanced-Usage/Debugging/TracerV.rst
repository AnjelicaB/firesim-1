Debugging Using TracerV
=======================

FireSim can provide a cycle-by-cycle trace of the CPU's architectural state
over the course of execution. This can be useful for profiling or debugging.
The tracing functionality is provided by the TracerV widget, which is generated by default
but not enabled at runtime.

Enabling Tracing at Runtime
---------------------------

By default, FireSim will not collect data from the TracerV widget, even if it
is included. To enable collection, add a new section to your config_runtime.ini.

.. code-block:: ini

    [tracing]
    enable=yes

Now when you run a workload, a trace output file will be placed in the
sim_slot_X directory on the F1 instance under the name TRACEFILE.
Tracing the entirety of a long-running job like a Linux-based workload can
generate a pretty large image, and you may only care about the state within a
certain timeframe. Therefore, FireSim allows you to specify a start cycle and
end cycle for collecting data. By default, it starts at cycle 0 and ends at
the last cycle of the simulation. To change this, add the following under
the "tracing" section.

.. code-block:: ini

    startcycle=XXXX
    endcycle=YYYY

TracerV Runtime Arguments (+args)
---------------------------------

Under the hood, TracerV settings in your config_runtime.ini are being translated to plusargs 
that are passed the simulator during ``firesim runworkload``. You can pass these same plusargs to MIDAS- and FPGA-level
simulators if you invoke them directly or by setting ``EXTRA_SIM_ARGS=<plusarg string>`` if you invoke them through ``make``.

**+tracefile0=<filename>**
    Specifies the file into which the trace will be dumped.

**+trace-start0=<uint64_t>**
    (From config_runtime.ini startcycle) Specifies the target cycle at which to start dumping the trace to file.

**+trace-end0=<uint64_t>**
    (From config_runtime.ini endcycle) Specifies the target cycle at which to stop dumping the trace to file.

**+trace-humanreadable0**
    Dumps the output trace as hexidecimal strings instead of raw binary. Each line 
    represents a single target-cycle of collected trace (one token).

Interpreting the Trace Result
-----------------------------
