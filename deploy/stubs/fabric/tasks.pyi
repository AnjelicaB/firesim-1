from fabric import state as state
from fabric.context_managers import settings as settings
from fabric.exceptions import NetworkError as NetworkError
from fabric.job_queue import JobQueue as JobQueue
from fabric.network import disconnect_all as disconnect_all, to_dict as to_dict
from fabric.task_utils import crawl as crawl, merge as merge, parse_kwargs as parse_kwargs
from fabric.utils import abort as abort, error as error, warn as warn
from typing import Any

def get_task_details(task): ...

class Task:
    name: str
    use_task_objects: bool
    aliases: Any
    is_default: bool
    def __init__(self, alias: Any | None = ..., aliases: Any | None = ..., default: bool = ..., name: Any | None = ..., *args, **kwargs) -> None: ...
    def __details__(self): ...
    def run(self) -> None: ...
    def get_hosts_and_effective_roles(self, arg_hosts, arg_roles, arg_exclude_hosts, env: Any | None = ...): ...
    def get_pool_size(self, hosts, default): ...

class WrappedCallableTask(Task):
    wrapped: Any
    __name__: Any
    __doc__: Any
    __module__: Any
    def __init__(self, callable, *args, **kwargs) -> None: ...
    def __call__(self, *args, **kwargs): ...
    def run(self, *args, **kwargs): ...
    def __getattr__(self, k): ...
    def __details__(self): ...

def requires_parallel(task): ...
def execute(task, *args, **kwargs): ...
