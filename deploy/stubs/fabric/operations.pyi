from fabric.context_managers import char_buffered as char_buffered, hide as hide, settings as settings
from fabric.io import input_loop as input_loop, output_loop as output_loop
from fabric.network import needs_host as needs_host, ssh_config as ssh_config#, ssh as ssh
from fabric.sftp import SFTP as SFTP
from fabric.state import connections as connections, default_channel as default_channel, env as env, output as output, win32 as win32
from fabric.thread_handling import ThreadHandler as ThreadHandler
from fabric.utils import abort as abort, apply_lcwd as apply_lcwd, error as error, handle_prompt_abort as handle_prompt_abort, indent as indent, warn as warn
from typing import Any

class _stdoutString(str):
    @property
    def stdout(self): ...

class _stdoutBytes(bytes):
    @property
    def stdout(self): ...

class _AttributeList(list): ...

def require(*keys, **kwargs) -> None: ...
def prompt(text, key: Any | None = ..., default: str = ..., validate: Any | None = ...): ...
def put(local_path: Any | None = ..., remote_path: Any | None = ..., use_sudo: bool = ..., mirror_local_mode: bool = ..., mode: Any | None = ..., use_glob: bool = ..., temp_dir: Any | None = ...): ...
def get(remote_path, local_path: Any | None = ..., use_sudo: bool = ..., temp_dir: Any | None = ...): ...
def open_shell(command: Any | None = ...) -> None: ...
def run(command, shell: bool = ..., pty: bool = ..., combine_stderr: Any | None = ..., quiet: bool = ..., warn_only: bool = ..., stdin: Any | None = ..., stdout: Any | None = ..., stderr: Any | None = ..., timeout: Any | None = ..., shell_escape: Any | None = ..., capture_buffer_size: Any | None = ...): ...
def sudo(command, shell: bool = ..., pty: bool = ..., combine_stderr: Any | None = ..., user: Any | None = ..., quiet: bool = ..., warn_only: bool = ..., stdin: Any | None = ..., stdout: Any | None = ..., stderr: Any | None = ..., group: Any | None = ..., timeout: Any | None = ..., shell_escape: Any | None = ..., capture_buffer_size: Any | None = ...): ...
def local(command, capture: bool = ..., shell: Any | None = ..., pty: bool = ..., encoding: str = ...): ...
def reboot(wait: int = ..., command: str = ..., use_sudo: bool = ...) -> None: ...
