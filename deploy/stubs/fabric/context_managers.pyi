from collections.abc import Generator
from contextlib import ExitStack
from fabric import state as state
from fabric.state import connections as connections, env as env, output as output, win32 as win32
from fabric.thread_handling import ThreadHandler as ThreadHandler
from fabric.utils import isatty as isatty
from typing import Any

class nested(ExitStack):
    def __init__(self, *managers) -> None: ...

def documented_contextmanager(func): ...
def show(*groups): ...
def hide(*groups): ...
def settings(*args, **kwargs): ...
def cd(path): ...
def lcd(path): ...
def path(path, behavior: str = ...): ...
def prefix(command): ...
def char_buffered(pipe) -> Generator[None, None, None]: ...
def shell_env(**kw): ...
def remote_tunnel(remote_port, local_port: Any | None = ..., local_host: str = ..., remote_bind_address: str = ...) -> Generator[None, None, None]: ...
def quiet(): ...
def warn_only(): ...
