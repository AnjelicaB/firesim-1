from fabric import api as api, colors as colors, state as state
from fabric.contrib import console as console, files as files, project as project
from fabric.network import disconnect_all as disconnect_all, ssh as ssh
from fabric.state import env_options as env_options
from fabric.task_utils import crawl as crawl
from fabric.tasks import Task as Task, execute as execute, get_task_details as get_task_details
from fabric.utils import abort as abort, indent as indent, warn as warn
from typing import Any

class _ModuleCache:
    cache: Any
    def __init__(self) -> None: ...
    def __contains__(self, value): ...
    def add(self, value): ...
    def clear(self): ...

def load_settings(path): ...
def find_fabfile(names: Any | None = ...): ...
def is_classic_task(tup): ...
def load_fabfile(path, importer: Any | None = ...): ...
def load_tasks_from_module(imported): ...
def extract_tasks(imported_vars): ...
def is_task_module(a): ...
def is_task_object(a): ...
def parse_options(): ...

COMMANDS_HEADER: str
NESTED_REMINDER: str

def list_commands(docstring, format_): ...
def display_command(name) -> None: ...
def parse_arguments(arguments): ...
def parse_remainder(arguments): ...
def update_output_levels(show, hide) -> None: ...
def show_commands(docstring, format, code: int = ...) -> None: ...
def main(fabfile_locations: Any | None = ...): ...
